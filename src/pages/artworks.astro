---
import Layout from "../layouts/Layout.astro";

import { Image } from "astro:assets";

import config from "../data/config.json";

import { getArtworks } from "../data/utils.astro";
const artworks = await getArtworks();
---

<Layout title="Artworks" hasNav={false}>
  <div
    class="flex flex-col text-5xl justify-center gap-1 absolute right-2 top-1/2 z-50 max-md:hidden"
  >
    <span
      class="icon-[icon-park-outline--up-c] text-white cursor-pointer hover:text-primary transition"
      id="upButton"></span>
    <span
      class="icon-[icon-park-outline--up-c] text-white -scale-y-100 hover:text-primary transition cursor-pointer"
      id="downButton"></span>
  </div>
  <a
    class="icon-[material-symbols--close] fixed top-4 right-4 text-white z-50 text-6xl cursor-pointer hover:text-primary transition"
    href="/"></a>
  <div class="h-screen overflow-hidden">
    {
      artworks.map((artwork) => {
        return (
          <section
            class="fixed h-full top-0 left-0 w-full bg-cover flex flex-col opacity-0"
            style={`background-image: url('${artwork.bgImage}')`}
          >
            <div class="absolute top-0 left-0 w-full h-full bg-black/50" />
            <div class="flex flex-col justify-center h-full max-w-screen-xl mx-auto">
              <div class="grid grid-cols-2 max-md:grid-cols-1 relative gap-16 z-10 p-4 max-md:gap-8">
                <Image
                  src={artwork.image}
                  alt={artwork.name}
                  class="w-full border-[16px] border-white"
                />
                <div class="flex justify-center">
                  <div class="flex flex-col text-white gap-4 max-md:gap-2">
                    <h1 class="uppercase text-6xl max-md:text-4xl font-extrabold">
                      {config.name}
                    </h1>
                    <h1 class="italic font-extralight text-6xl max-md:text-4xl">
                      {artwork.name}, {artwork.year}
                    </h1>
                    <h2 class="text-3xl font-extralight max-md:text-xl">
                      {artwork.materials}
                    </h2>
                    <h3 class="text-lg font-extralight">
                      Copyright {config.businessName}
                    </h3>
                    <h1 class="mt-auto text-xl font-bold max-md:text-base">
                      ${artwork.price}
                    </h1>
                  </div>
                  <div class="w-[50px]" />
                </div>
              </div>
            </div>
          </section>
        );
      })
    }
  </div>
</Layout>

<script>
  import gsap from "gsap";
  import { Observer } from "gsap/Observer";

  gsap.registerPlugin(Observer);

  const sections = document.querySelectorAll("section");

  let animating: boolean;
  let currentIndex: number = -1;
  let wrap = gsap.utils.wrap(0, sections.length);
  let t1: gsap.core.Timeline = gsap.timeline({
    defaults: { duration: 1.25, ease: "power1.inOut" },
    onComplete: () => {
      animating = false;
    },
  });

  const gotoSection = (index: number, direction: number) => {
    index = wrap(index);
    animating = true;

    // Reset the zIndex and autoAlpha for all sections except the current one
    sections.forEach((section, i) => {
      if (i !== currentIndex && i !== index) {
        gsap.set(section, { zIndex: 0, autoAlpha: 0 });
      }
    });

    gsap.set(sections[currentIndex], { zIndex: 10 });

    gsap.set(sections[index], { autoAlpha: 1, zIndex: 20 });
    if (currentIndex == -1) {
      gsap.set(sections[index], { yPercent: 0 });
    } else {
      t1.fromTo(
        sections[index],
        { yPercent: direction * 100 },
        { yPercent: 0 }
      );
    }

    currentIndex = index;
  };

  Observer.create({
    type: "wheel,touch,pointer",
    wheelSpeed: -1,
    onDown: () => {
      console.log("Down");
      !animating && gotoSection(currentIndex - 1, -1);
    },
    onUp: () => !animating && gotoSection(currentIndex + 1, 1),
    tolerance: 10,
    preventDefault: true,
  });

  const upButton = document.getElementById("upButton");
  const downButton = document.getElementById("downButton");

  if (!upButton || !downButton) {
    throw new Error("Buttons not found");
  }
  upButton.addEventListener("click", () => {
    !animating && gotoSection(currentIndex - 1, -1);
  });
  downButton.addEventListener("click", () => {
    !animating && gotoSection(currentIndex + 1, 1);
  });

  const queryString = window.location.search;
  const urlParams = new URLSearchParams(queryString);
  console.log(Number(urlParams.get("page")));
  gotoSection(Number(urlParams.get("page")), -1);
</script>
